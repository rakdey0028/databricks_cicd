name: Databricks CI
on: [pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "DATABRICKS_HOST=${{ secrets.DATABRICKS_HOST }}" >> $GITHUB_ENV
        echo "DATABRICKS_TOKEN=${{ secrets.DATABRICKS_TOKEN }}" >> $GITHUB_ENV
        echo "DATABRICKS_CLUSTER_ID=${{ secrets.DATABRICKS_CLUSTER_ID }}" >> $GITHUB_ENV
        echo "DATABRICKS_ORG_ID=${{ secrets.DATABRICKS_ORG_ID }}" >> $GITHUB_ENV
        echo "DATABRICKS_PORT=${{ secrets.DATABRICKS_PORT }}" >> $GITHUB_ENV

    - name: Configure Databricks Connect
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        DATABRICKS_CLUSTER_ID: ${{ secrets.DATABRICKS_CLUSTER_ID }}
        DATABRICKS_ORG_ID: ${{ secrets.DATABRICKS_ORG_ID }}
        DATABRICKS_PORT: ${{ secrets.DATABRICKS_PORT || '15001' }}
      run: |
        # Create the configuration file directly
        mkdir -p ~/.databricks-connect
        cat > ~/.databricks-connect/config <<EOF
        {
          "host": "$DATABRICKS_HOST",
          "token": "$DATABRICKS_TOKEN",
          "cluster_id": "$DATABRICKS_CLUSTER_ID",
          "org_id": "$DATABRICKS_ORG_ID",
          "port": "$DATABRICKS_PORT"
        }
        EOF
        
        # Verify configuration
        databricks-connect test
        echo "Databricks Connect configured successfully"

    - name: Run tests
      run: |
        pytest functions --junitxml=unit-testresults.xml

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v1
      if: always()
      with:
        files: unit-testresults.xml

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.event_name=='pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        pip install wheel databricks-cli
        
    - name: Build wheel
      run: |
        python setup.py bdist_wheel
        ls -la dist/
        echo "WHEEL_NAME=$(ls dist/*.whl)" >> $GITHUB_ENV
    
    - name: Configure Databricks CLI
      env:
        DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
        DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
      run: |
        echo "Configuring Databricks CLI..."
        cat > ~/.databrickscfg <<EOF
        [DEFAULT]
        host = $DATABRICKS_HOST
        token = $DATABRICKS_TOKEN
        EOF

        
    - name: Deploy to DBFS
      run: |
        echo "Deploying wheel to DBFS..."
        databricks fs mkdirs "dbfs:/FileStore/wheels/"
        databricks fs cp --overwrite "$WHEEL_NAME" "dbfs:/FileStore/wheels/$WHEEL_NAME"
        echo "Deployed to: dbfs:/FileStore/wheels/$WHEEL_NAME"

  
